!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Bytes	chipmunk_types.h	/^			unsigned __int8 Bytes[4];$/;"	m	union:MSVC_EVIL_FLOAT_HACK
CHIPMUNK_BB_H	cpBB.h	/^#define CHIPMUNK_BB_H$/;"	d
CHIPMUNK_H	chipmunk.h	/^#define CHIPMUNK_H$/;"	d
CHIPMUNK_PRIVATE_H	chipmunk_private.h	/^#define CHIPMUNK_PRIVATE_H$/;"	d
CHIPMUNK_STRUCTS_H	chipmunk_structs.h	/^#define CHIPMUNK_STRUCTS_H$/;"	d
CHIPMUNK_TRANSFORM_H	cpTransform.h	/^#define CHIPMUNK_TRANSFORM_H$/;"	d
CHIPMUNK_TYPES_H	chipmunk_types.h	/^#define CHIPMUNK_TYPES_H$/;"	d
CHIPMUNK_UNSAFE_H	chipmunk_unsafe.h	/^#define CHIPMUNK_UNSAFE_H$/;"	d
CHIPMUNK_VECT_H	cpVect.h	/^#define CHIPMUNK_VECT_H$/;"	d
CPFLOAT_MIN	chipmunk_types.h	/^	#define CPFLOAT_MIN /;"	d
CP_ALL_CATEGORIES	chipmunk_types.h	/^	#define CP_ALL_CATEGORIES /;"	d
CP_ARBITER_GET_BODIES	cpArbiter.h	/^#define CP_ARBITER_GET_BODIES(/;"	d
CP_ARBITER_GET_SHAPES	cpArbiter.h	/^#define CP_ARBITER_GET_SHAPES(/;"	d
CP_ARBITER_STATE_CACHED	chipmunk_structs.h	/^	CP_ARBITER_STATE_CACHED,$/;"	e	enum:cpArbiterState
CP_ARBITER_STATE_FIRST_COLLISION	chipmunk_structs.h	/^	CP_ARBITER_STATE_FIRST_COLLISION,$/;"	e	enum:cpArbiterState
CP_ARBITER_STATE_IGNORE	chipmunk_structs.h	/^	CP_ARBITER_STATE_IGNORE,$/;"	e	enum:cpArbiterState
CP_ARBITER_STATE_INVALIDATED	chipmunk_structs.h	/^	CP_ARBITER_STATE_INVALIDATED,$/;"	e	enum:cpArbiterState
CP_ARBITER_STATE_NORMAL	chipmunk_structs.h	/^	CP_ARBITER_STATE_NORMAL,$/;"	e	enum:cpArbiterState
CP_BODY_FOREACH_ARBITER	chipmunk_private.h	/^#define CP_BODY_FOREACH_ARBITER(/;"	d
CP_BODY_FOREACH_COMPONENT	chipmunk_private.h	/^#define CP_BODY_FOREACH_COMPONENT(/;"	d
CP_BODY_FOREACH_CONSTRAINT	chipmunk_private.h	/^#define CP_BODY_FOREACH_CONSTRAINT(/;"	d
CP_BODY_FOREACH_SHAPE	chipmunk_private.h	/^#define CP_BODY_FOREACH_SHAPE(/;"	d
CP_BODY_TYPE_DYNAMIC	cpBody.h	/^	CP_BODY_TYPE_DYNAMIC,$/;"	e	enum:cpBodyType
CP_BODY_TYPE_KINEMATIC	cpBody.h	/^	CP_BODY_TYPE_KINEMATIC,$/;"	e	enum:cpBodyType
CP_BODY_TYPE_STATIC	cpBody.h	/^	CP_BODY_TYPE_STATIC,$/;"	e	enum:cpBodyType
CP_BUFFER_BYTES	chipmunk.h	/^	#define CP_BUFFER_BYTES /;"	d
CP_CIRCLE_SHAPE	chipmunk_structs.h	/^	CP_CIRCLE_SHAPE,$/;"	e	enum:cpShapeType
CP_CONVEX_HULL	chipmunk.h	/^#define CP_CONVEX_HULL(/;"	d
CP_EXPORT	chipmunk.h	/^	#define CP_EXPORT /;"	d
CP_EXPORT	chipmunk.h	/^	#define CP_EXPORT$/;"	d
CP_HASH_COEF	chipmunk_private.h	/^#define CP_HASH_COEF /;"	d
CP_HASH_PAIR	chipmunk_private.h	/^#define CP_HASH_PAIR(/;"	d
CP_MAX_CONTACTS_PER_ARBITER	cpArbiter.h	/^#define CP_MAX_CONTACTS_PER_ARBITER /;"	d
CP_NO_GROUP	chipmunk_types.h	/^	#define CP_NO_GROUP /;"	d
CP_NUM_SHAPES	chipmunk_structs.h	/^	CP_NUM_SHAPES$/;"	e	enum:cpShapeType
CP_PI	chipmunk_types.h	/^#define CP_PI /;"	d
CP_POLY_SHAPE	chipmunk_structs.h	/^	CP_POLY_SHAPE,$/;"	e	enum:cpShapeType
CP_POLY_SHAPE_INLINE_ALLOC	chipmunk_structs.h	/^#define CP_POLY_SHAPE_INLINE_ALLOC /;"	d
CP_SEGMENT_SHAPE	chipmunk_structs.h	/^	CP_SEGMENT_SHAPE,$/;"	e	enum:cpShapeType
CP_SHAPE_FILTER_ALL	cpShape.h	/^static const cpShapeFilter CP_SHAPE_FILTER_ALL = {CP_NO_GROUP, CP_ALL_CATEGORIES, CP_ALL_CATEGORIES};$/;"	v
CP_SHAPE_FILTER_NONE	cpShape.h	/^static const cpShapeFilter CP_SHAPE_FILTER_NONE = {CP_NO_GROUP, ~CP_ALL_CATEGORIES, ~CP_ALL_CATEGORIES};$/;"	v
CP_SPACE_DEBUG_DRAW_COLLISION_POINTS	cpSpace.h	/^	CP_SPACE_DEBUG_DRAW_COLLISION_POINTS = 1<<2,$/;"	e	enum:cpSpaceDebugDrawFlags
CP_SPACE_DEBUG_DRAW_CONSTRAINTS	cpSpace.h	/^	CP_SPACE_DEBUG_DRAW_CONSTRAINTS = 1<<1,$/;"	e	enum:cpSpaceDebugDrawFlags
CP_SPACE_DEBUG_DRAW_SHAPES	cpSpace.h	/^	CP_SPACE_DEBUG_DRAW_SHAPES = 1<<0,$/;"	e	enum:cpSpaceDebugDrawFlags
CP_USE_CGTYPES	chipmunk_types.h	/^	#define CP_USE_CGTYPES /;"	d
CP_USE_DOUBLES	chipmunk_types.h	/^		#define CP_USE_DOUBLES /;"	d
CP_USE_DOUBLES	chipmunk_types.h	/^	#define CP_USE_DOUBLES /;"	d
CP_VERSION_MAJOR	chipmunk.h	/^#define CP_VERSION_MAJOR /;"	d
CP_VERSION_MINOR	chipmunk.h	/^#define CP_VERSION_MINOR /;"	d
CP_VERSION_RELEASE	chipmunk.h	/^#define CP_VERSION_RELEASE /;"	d
CP_WILDCARD_COLLISION_TYPE	chipmunk_types.h	/^	#define CP_WILDCARD_COLLISION_TYPE /;"	d
CircleSegmentQuery	chipmunk_private.h	/^CircleSegmentQuery(cpShape *shape, cpVect center, cpFloat r1, cpVect a, cpVect b, cpFloat r2, cpSegmentQueryInfo *info)$/;"	f
INFINITY	chipmunk_types.h	/^		#define INFINITY /;"	d
INFINITY_HACK	chipmunk_types.h	/^		static union MSVC_EVIL_FLOAT_HACK INFINITY_HACK = {{0x00, 0x00, 0x80, 0x7F}};$/;"	v	typeref:union:MSVC_EVIL_FLOAT_HACK
MAGIC_EPSILON	chipmunk_private.h	/^#define MAGIC_EPSILON /;"	d
MAKE_REF	chipmunk_ffi.h	/^  #define MAKE_REF(/;"	d
MAKE_REF	chipmunk_ffi.h	/^ #define MAKE_REF(/;"	d
MSVC_EVIL_FLOAT_HACK	chipmunk_types.h	/^		union MSVC_EVIL_FLOAT_HACK$/;"	u
Value	chipmunk_types.h	/^			float Value;$/;"	m	union:MSVC_EVIL_FLOAT_HACK
_planes	chipmunk_structs.h	/^	struct cpSplittingPlane _planes[2*CP_POLY_SHAPE_INLINE_ALLOC];$/;"	m	struct:cpPolyShape	typeref:struct:cpPolyShape::cpSplittingPlane
_staticBody	chipmunk_structs.h	/^	cpBody _staticBody;$/;"	m	struct:cpSpace
a	chipmunk_structs.h	/^	const cpShape *a, *b;$/;"	m	struct:cpArbiter
a	chipmunk_structs.h	/^	const cpShape *a, *b;$/;"	m	struct:cpCollisionInfo
a	chipmunk_structs.h	/^	cpBody *a, *b;$/;"	m	struct:cpConstraint
a	chipmunk_structs.h	/^	cpFloat a;$/;"	m	struct:cpBody
a	chipmunk_structs.h	/^	cpVect a, b, n;$/;"	m	struct:cpSegmentShape
a	chipmunk_types.h	/^		cpFloat a, b, c, d, tx, ty;$/;"	m	struct:cpTransform
a	chipmunk_types.h	/^	cpFloat a, b, c, d;$/;"	m	struct:cpMat2x2
a	cpSpace.h	/^	float r, g, b, a;$/;"	m	struct:cpSpaceDebugColor
a_tangent	chipmunk_structs.h	/^	cpVect a_tangent, b_tangent;$/;"	m	struct:cpSegmentShape
allocatedBuffers	chipmunk_structs.h	/^	cpArray *allocatedBuffers;$/;"	m	struct:cpSpace
alpha	chipmunk.h	/^typedef void (^cpSpaceSegmentQueryBlock)(cpShape *shape, cpVect point, cpVect normal, cpFloat alpha);$/;"	v
alpha	cpShape.h	/^	cpFloat alpha;$/;"	m	struct:cpSegmentQueryInfo
anchorA	chipmunk_structs.h	/^	cpVect anchorA, anchorB;$/;"	m	struct:cpDampedSpring
anchorA	chipmunk_structs.h	/^	cpVect anchorA, anchorB;$/;"	m	struct:cpPinJoint
anchorA	chipmunk_structs.h	/^	cpVect anchorA, anchorB;$/;"	m	struct:cpPivotJoint
anchorA	chipmunk_structs.h	/^	cpVect anchorA, anchorB;$/;"	m	struct:cpSlideJoint
anchorB	chipmunk_structs.h	/^	cpVect  anchorB;$/;"	m	struct:cpGrooveJoint
anchorB	chipmunk_structs.h	/^	cpVect anchorA, anchorB;$/;"	m	struct:cpDampedSpring
anchorB	chipmunk_structs.h	/^	cpVect anchorA, anchorB;$/;"	m	struct:cpPinJoint
anchorB	chipmunk_structs.h	/^	cpVect anchorA, anchorB;$/;"	m	struct:cpPivotJoint
anchorB	chipmunk_structs.h	/^	cpVect anchorA, anchorB;$/;"	m	struct:cpSlideJoint
angle	chipmunk_structs.h	/^	cpFloat angle, phase, ratchet;$/;"	m	struct:cpRatchetJoint
applyCachedImpulse	chipmunk_structs.h	/^	cpConstraintApplyCachedImpulseImpl applyCachedImpulse;$/;"	m	struct:cpConstraintClass
applyImpulse	chipmunk_structs.h	/^	cpConstraintApplyImpulseImpl applyImpulse;$/;"	m	struct:cpConstraintClass
apply_bias_impulse	chipmunk_private.h	/^apply_bias_impulse(cpBody *body, cpVect j, cpVect r)$/;"	f
apply_bias_impulses	chipmunk_private.h	/^apply_bias_impulses(cpBody *a , cpBody *b, cpVect r1, cpVect r2, cpVect j)$/;"	f
apply_impulse	chipmunk_private.h	/^apply_impulse(cpBody *body, cpVect j, cpVect r){$/;"	f
apply_impulses	chipmunk_private.h	/^apply_impulses(cpBody *a , cpBody *b, cpVect r1, cpVect r2, cpVect j)$/;"	f
arbiterList	chipmunk_structs.h	/^	cpArbiter *arbiterList;$/;"	m	struct:cpBody
arbiters	chipmunk_structs.h	/^	cpArray *arbiters;$/;"	m	struct:cpSpace
area	chipmunk_structs.h	/^	cpFloat area;$/;"	m	struct:cpShapeMassInfo
arr	chipmunk_structs.h	/^	struct cpContact *arr;$/;"	m	struct:cpCollisionInfo	typeref:struct:cpCollisionInfo::cpContact
arr	chipmunk_structs.h	/^	void **arr;$/;"	m	struct:cpArray
b	chipmunk_structs.h	/^	const cpShape *a, *b;$/;"	m	struct:cpArbiter
b	chipmunk_structs.h	/^	const cpShape *a, *b;$/;"	m	struct:cpCollisionInfo
b	chipmunk_structs.h	/^	cpBody *a, *b;$/;"	m	struct:cpConstraint
b	chipmunk_structs.h	/^	cpVect a, b, n;$/;"	m	struct:cpSegmentShape
b	chipmunk_types.h	/^		cpFloat a, b, c, d, tx, ty;$/;"	m	struct:cpTransform
b	chipmunk_types.h	/^	cpFloat a, b, c, d;$/;"	m	struct:cpMat2x2
b	cpBB.h	/^	cpFloat l, b, r ,t;$/;"	m	struct:cpBB
b	cpSpace.h	/^	float r, g, b, a;$/;"	m	struct:cpSpaceDebugColor
b_tangent	chipmunk_structs.h	/^	cpVect a_tangent, b_tangent;$/;"	m	struct:cpSegmentShape
bb	chipmunk_structs.h	/^	cpBB bb;$/;"	m	struct:cpShape
bbfunc	cpSpatialIndex.h	/^	cpSpatialIndexBBFunc bbfunc;$/;"	m	struct:cpSpatialIndex
beginFunc	cpSpace.h	/^	cpCollisionBeginFunc beginFunc;$/;"	m	struct:cpCollisionHandler
bias	chipmunk_structs.h	/^	cpFloat bias;$/;"	m	struct:cpContact
bias	chipmunk_structs.h	/^	cpFloat bias;$/;"	m	struct:cpGearJoint
bias	chipmunk_structs.h	/^	cpFloat bias;$/;"	m	struct:cpPinJoint
bias	chipmunk_structs.h	/^	cpFloat bias;$/;"	m	struct:cpRatchetJoint
bias	chipmunk_structs.h	/^	cpFloat bias;$/;"	m	struct:cpRotaryLimitJoint
bias	chipmunk_structs.h	/^	cpFloat bias;$/;"	m	struct:cpSlideJoint
bias	chipmunk_structs.h	/^	cpVect bias;$/;"	m	struct:cpGrooveJoint
bias	chipmunk_structs.h	/^	cpVect bias;$/;"	m	struct:cpPivotJoint
bias_coef	chipmunk_private.h	/^bias_coef(cpFloat errorBias, cpFloat dt)$/;"	f
body	chipmunk_structs.h	/^	cpBody *body;$/;"	m	struct:cpShape
body_a	chipmunk_structs.h	/^	cpBody *body_a, *body_b;$/;"	m	struct:cpArbiter
body_b	chipmunk_structs.h	/^	cpBody *body_a, *body_b;$/;"	m	struct:cpArbiter
bounce	chipmunk_structs.h	/^	cpFloat bounce; \/\/ TODO: look for an alternate bounce solution.$/;"	m	struct:cpContact
c	chipmunk_structs.h	/^	cpVect c, tc;$/;"	m	struct:cpCircleShape
c	chipmunk_types.h	/^		cpFloat a, b, c, d, tx, ty;$/;"	m	struct:cpTransform
c	chipmunk_types.h	/^	cpFloat a, b, c, d;$/;"	m	struct:cpMat2x2
cacheData	chipmunk_structs.h	/^	cpShapeCacheDataImpl cacheData;$/;"	m	struct:cpShapeClass
cachedArbiters	chipmunk_structs.h	/^	cpHashSet *cachedArbiters;$/;"	m	struct:cpSpace
capacity	cpPolyline.h	/^  int count, capacity;$/;"	m	struct:cpPolyline
capacity	cpPolyline.h	/^  int count, capacity;$/;"	m	struct:cpPolylineSet
categories	cpShape.h	/^	cpBitmask categories;$/;"	m	struct:cpShapeFilter
clamp	chipmunk_structs.h	/^	cpFloat clamp;$/;"	m	struct:cpGrooveJoint
cog	chipmunk_structs.h	/^	cpVect cog;$/;"	m	struct:cpBody
cog	chipmunk_structs.h	/^	cpVect cog;$/;"	m	struct:cpShapeMassInfo
collideBodies	chipmunk_structs.h	/^	cpBool collideBodies;$/;"	m	struct:cpConstraint
collisionBias	chipmunk_structs.h	/^	cpFloat collisionBias;$/;"	m	struct:cpSpace
collisionHandlers	chipmunk_structs.h	/^	cpHashSet *collisionHandlers;$/;"	m	struct:cpSpace
collisionPersistence	chipmunk_structs.h	/^	cpTimestamp collisionPersistence;$/;"	m	struct:cpSpace
collisionPointColor	cpSpace.h	/^	cpSpaceDebugColor collisionPointColor;$/;"	m	struct:cpSpaceDebugDrawOptions
collisionSlop	chipmunk_structs.h	/^	cpFloat collisionSlop;$/;"	m	struct:cpSpace
colorForShape	cpSpace.h	/^	cpSpaceDebugDrawColorForShapeImpl colorForShape;$/;"	m	struct:cpSpaceDebugDrawOptions
constraint	chipmunk_structs.h	/^	cpConstraint constraint;$/;"	m	struct:cpDampedRotarySpring
constraint	chipmunk_structs.h	/^	cpConstraint constraint;$/;"	m	struct:cpDampedSpring
constraint	chipmunk_structs.h	/^	cpConstraint constraint;$/;"	m	struct:cpGearJoint
constraint	chipmunk_structs.h	/^	cpConstraint constraint;$/;"	m	struct:cpGrooveJoint
constraint	chipmunk_structs.h	/^	cpConstraint constraint;$/;"	m	struct:cpPinJoint
constraint	chipmunk_structs.h	/^	cpConstraint constraint;$/;"	m	struct:cpPivotJoint
constraint	chipmunk_structs.h	/^	cpConstraint constraint;$/;"	m	struct:cpRatchetJoint
constraint	chipmunk_structs.h	/^	cpConstraint constraint;$/;"	m	struct:cpRotaryLimitJoint
constraint	chipmunk_structs.h	/^	cpConstraint constraint;$/;"	m	struct:cpSimpleMotor
constraint	chipmunk_structs.h	/^	cpConstraint constraint;$/;"	m	struct:cpSlideJoint
constraintColor	cpSpace.h	/^	cpSpaceDebugColor constraintColor;$/;"	m	struct:cpSpaceDebugDrawOptions
constraintList	chipmunk_structs.h	/^	cpConstraint *constraintList;$/;"	m	struct:cpBody
constraints	chipmunk_structs.h	/^	cpArray *constraints;$/;"	m	struct:cpSpace
contactBuffersHead	chipmunk_structs.h	/^	cpContactBufferHeader *contactBuffersHead;$/;"	m	struct:cpSpace
contacts	chipmunk_structs.h	/^	struct cpContact *contacts;$/;"	m	struct:cpArbiter	typeref:struct:cpArbiter::cpContact
contains	cpSpatialIndex.h	/^	cpSpatialIndexContainsImpl contains;$/;"	m	struct:cpSpatialIndexClass
count	chipmunk_structs.h	/^	int count;$/;"	m	struct:cpArbiter
count	chipmunk_structs.h	/^	int count;$/;"	m	struct:cpCollisionInfo
count	chipmunk_structs.h	/^	int count;$/;"	m	struct:cpPolyShape
count	cpArbiter.h	/^	int count;$/;"	m	struct:cpContactPointSet
count	cpPolyline.h	/^  int count, capacity;$/;"	m	struct:cpPolyline
count	cpPolyline.h	/^  int count, capacity;$/;"	m	struct:cpPolylineSet
count	cpSpatialIndex.h	/^	cpSpatialIndexCountImpl count;$/;"	m	struct:cpSpatialIndexClass
cpArbiter	chipmunk.h	/^typedef struct cpArbiter cpArbiter;$/;"	t	typeref:struct:cpArbiter
cpArbiter	chipmunk_structs.h	/^struct cpArbiter {$/;"	s
cpArbiterNext	chipmunk_private.h	/^cpArbiterNext(cpArbiter *node, cpBody *body)$/;"	f
cpArbiterState	chipmunk_structs.h	/^enum cpArbiterState {$/;"	g
cpArbiterThread	chipmunk_structs.h	/^struct cpArbiterThread {$/;"	s
cpArbiterThreadForBody	chipmunk_private.h	/^cpArbiterThreadForBody(cpArbiter *arb, cpBody *body)$/;"	f
cpArray	chipmunk.h	/^typedef struct cpArray cpArray;$/;"	t	typeref:struct:cpArray
cpArray	chipmunk_structs.h	/^struct cpArray {$/;"	s
cpAssertHard	chipmunk.h	/^#define cpAssertHard(/;"	d
cpAssertSoft	chipmunk.h	/^	#define	cpAssertSoft(/;"	d
cpAssertSoft	chipmunk.h	/^	#define cpAssertSoft(/;"	d
cpAssertSpaceUnlocked	chipmunk_private.h	/^#define cpAssertSpaceUnlocked(/;"	d
cpAssertWarn	chipmunk.h	/^	#define	cpAssertWarn(/;"	d
cpAssertWarn	chipmunk.h	/^	#define cpAssertWarn(/;"	d
cpBB	cpBB.h	/^typedef struct cpBB{$/;"	s
cpBB	cpBB.h	/^} cpBB;$/;"	t	typeref:struct:cpBB
cpBBArea	chipmunk_ffi.h	/^MAKE_REF(cpBBArea);$/;"	v
cpBBArea	cpBB.h	/^static inline cpFloat cpBBArea(cpBB bb)$/;"	f
cpBBCenter	chipmunk_ffi.h	/^MAKE_REF(cpBBCenter);$/;"	v
cpBBCenter	cpBB.h	/^cpBBCenter(cpBB bb)$/;"	f
cpBBClampVect	chipmunk_ffi.h	/^MAKE_REF(cpBBClampVect);$/;"	v
cpBBClampVect	cpBB.h	/^cpBBClampVect(const cpBB bb, const cpVect v)$/;"	f
cpBBContainsBB	chipmunk_ffi.h	/^MAKE_REF(cpBBContainsBB);$/;"	v
cpBBContainsBB	cpBB.h	/^static inline cpBool cpBBContainsBB(const cpBB bb, const cpBB other)$/;"	f
cpBBContainsVect	chipmunk_ffi.h	/^MAKE_REF(cpBBContainsVect);$/;"	v
cpBBContainsVect	cpBB.h	/^static inline cpBool cpBBContainsVect(const cpBB bb, const cpVect v)$/;"	f
cpBBExpand	chipmunk_ffi.h	/^MAKE_REF(cpBBExpand);$/;"	v
cpBBExpand	cpBB.h	/^static inline cpBB cpBBExpand(const cpBB bb, const cpVect v){$/;"	f
cpBBIntersects	chipmunk_ffi.h	/^MAKE_REF(cpBBIntersects);$/;"	v
cpBBIntersects	cpBB.h	/^static inline cpBool cpBBIntersects(const cpBB a, const cpBB b)$/;"	f
cpBBIntersectsSegment	chipmunk_ffi.h	/^MAKE_REF(cpBBIntersectsSegment);$/;"	v
cpBBIntersectsSegment	cpBB.h	/^static inline cpBool cpBBIntersectsSegment(cpBB bb, cpVect a, cpVect b)$/;"	f
cpBBMerge	chipmunk_ffi.h	/^MAKE_REF(cpBBMerge);$/;"	v
cpBBMerge	cpBB.h	/^static inline cpBB cpBBMerge(const cpBB a, const cpBB b){$/;"	f
cpBBMergedArea	chipmunk_ffi.h	/^MAKE_REF(cpBBMergedArea);$/;"	v
cpBBMergedArea	cpBB.h	/^static inline cpFloat cpBBMergedArea(cpBB a, cpBB b)$/;"	f
cpBBNew	chipmunk_ffi.h	/^MAKE_REF(cpBBNew);$/;"	v
cpBBNew	cpBB.h	/^static inline cpBB cpBBNew(const cpFloat l, const cpFloat b, const cpFloat r, const cpFloat t)$/;"	f
cpBBNewForCircle	chipmunk_ffi.h	/^MAKE_REF(cpBBNewForCircle);$/;"	v
cpBBNewForCircle	cpBB.h	/^static inline cpBB cpBBNewForCircle(const cpVect p, const cpFloat r)$/;"	f
cpBBNewForExtents	chipmunk_ffi.h	/^MAKE_REF(cpBBNewForExtents);$/;"	v
cpBBNewForExtents	cpBB.h	/^cpBBNewForExtents(const cpVect c, const cpFloat hw, const cpFloat hh)$/;"	f
cpBBOffset	cpBB.h	/^cpBBOffset(const cpBB bb, const cpVect v)$/;"	f
cpBBSegmentQuery	chipmunk_ffi.h	/^MAKE_REF(cpBBSegmentQuery);$/;"	v
cpBBSegmentQuery	cpBB.h	/^static inline cpFloat cpBBSegmentQuery(cpBB bb, cpVect a, cpVect b)$/;"	f
cpBBTree	cpSpatialIndex.h	/^typedef struct cpBBTree cpBBTree;$/;"	t	typeref:struct:cpBBTree
cpBBTreeVelocityFunc	cpSpatialIndex.h	/^typedef cpVect (*cpBBTreeVelocityFunc)(void *obj);$/;"	t
cpBBWrapVect	cpBB.h	/^cpBBWrapVect(const cpBB bb, const cpVect v)$/;"	f
cpBitmask	chipmunk_types.h	/^	typedef CP_BITMASK_TYPE cpBitmask;$/;"	t
cpBitmask	chipmunk_types.h	/^	typedef unsigned int cpBitmask;$/;"	t
cpBody	chipmunk.h	/^typedef struct cpBody cpBody;$/;"	t	typeref:struct:cpBody
cpBody	chipmunk_structs.h	/^struct cpBody {$/;"	s
cpBodyArbiterIteratorFunc	cpBody.h	/^typedef void (*cpBodyArbiterIteratorFunc)(cpBody *body, cpArbiter *arbiter, void *data);$/;"	t
cpBodyConstraintIteratorFunc	cpBody.h	/^typedef void (*cpBodyConstraintIteratorFunc)(cpBody *body, cpConstraint *constraint, void *data);$/;"	t
cpBodyPositionFunc	cpBody.h	/^typedef void (*cpBodyPositionFunc)(cpBody *body, cpFloat dt);$/;"	t
cpBodyShapeIteratorFunc	cpBody.h	/^typedef void (*cpBodyShapeIteratorFunc)(cpBody *body, cpShape *shape, void *data);$/;"	t
cpBodyType	cpBody.h	/^typedef enum cpBodyType {$/;"	g
cpBodyType	cpBody.h	/^} cpBodyType;$/;"	t	typeref:enum:cpBodyType
cpBodyVelocityFunc	cpBody.h	/^typedef void (*cpBodyVelocityFunc)(cpBody *body, cpVect gravity, cpFloat damping, cpFloat dt);$/;"	t
cpBool	chipmunk_types.h	/^	typedef CP_BOOL_TYPE cpBool;$/;"	t
cpBool	chipmunk_types.h	/^	typedef unsigned char cpBool;$/;"	t
cpCircleShape	chipmunk.h	/^typedef struct cpCircleShape cpCircleShape;$/;"	t	typeref:struct:cpCircleShape
cpCircleShape	chipmunk_structs.h	/^struct cpCircleShape {$/;"	s
cpClosetPointOnSegment	chipmunk.h	/^cpClosetPointOnSegment(const cpVect p, const cpVect a, const cpVect b)$/;"	f
cpCollisionBeginFunc	cpSpace.h	/^typedef cpBool (*cpCollisionBeginFunc)(cpArbiter *arb, cpSpace *space, cpDataPointer userData);$/;"	t
cpCollisionHandler	chipmunk.h	/^typedef struct cpCollisionHandler cpCollisionHandler;$/;"	t	typeref:struct:cpCollisionHandler
cpCollisionHandler	cpSpace.h	/^struct cpCollisionHandler {$/;"	s
cpCollisionID	chipmunk_types.h	/^typedef uint32_t cpCollisionID;$/;"	t
cpCollisionInfo	chipmunk_structs.h	/^struct cpCollisionInfo {$/;"	s
cpCollisionPostSolveFunc	cpSpace.h	/^typedef void (*cpCollisionPostSolveFunc)(cpArbiter *arb, cpSpace *space, cpDataPointer userData);$/;"	t
cpCollisionPreSolveFunc	cpSpace.h	/^typedef cpBool (*cpCollisionPreSolveFunc)(cpArbiter *arb, cpSpace *space, cpDataPointer userData);$/;"	t
cpCollisionSeparateFunc	cpSpace.h	/^typedef void (*cpCollisionSeparateFunc)(cpArbiter *arb, cpSpace *space, cpDataPointer userData);$/;"	t
cpCollisionType	chipmunk_types.h	/^	typedef CP_COLLISION_TYPE_TYPE cpCollisionType;$/;"	t
cpCollisionType	chipmunk_types.h	/^	typedef uintptr_t cpCollisionType;$/;"	t
cpConstraint	chipmunk.h	/^typedef struct cpConstraint cpConstraint;$/;"	t	typeref:struct:cpConstraint
cpConstraint	chipmunk_structs.h	/^struct cpConstraint {$/;"	s
cpConstraintActivateBodies	chipmunk_private.h	/^cpConstraintActivateBodies(cpConstraint *constraint)$/;"	f
cpConstraintApplyCachedImpulseImpl	chipmunk_structs.h	/^typedef void (*cpConstraintApplyCachedImpulseImpl)(cpConstraint *constraint, cpFloat dt_coef);$/;"	t
cpConstraintApplyImpulseImpl	chipmunk_structs.h	/^typedef void (*cpConstraintApplyImpulseImpl)(cpConstraint *constraint, cpFloat dt);$/;"	t
cpConstraintClass	chipmunk_structs.h	/^typedef struct cpConstraintClass {$/;"	s
cpConstraintClass	chipmunk_structs.h	/^} cpConstraintClass;$/;"	t	typeref:struct:cpConstraintClass
cpConstraintGetImpulseImpl	chipmunk_structs.h	/^typedef cpFloat (*cpConstraintGetImpulseImpl)(cpConstraint *constraint);$/;"	t
cpConstraintNext	chipmunk_private.h	/^cpConstraintNext(cpConstraint *node, cpBody *body)$/;"	f
cpConstraintPostSolveFunc	cpConstraint.h	/^typedef void (*cpConstraintPostSolveFunc)(cpConstraint *constraint, cpSpace *space);$/;"	t
cpConstraintPreSolveFunc	cpConstraint.h	/^typedef void (*cpConstraintPreSolveFunc)(cpConstraint *constraint, cpSpace *space);$/;"	t
cpConstraintPreStepImpl	chipmunk_structs.h	/^typedef void (*cpConstraintPreStepImpl)(cpConstraint *constraint, cpFloat dt);$/;"	t
cpContact	chipmunk_structs.h	/^struct cpContact {$/;"	s
cpContactBufferHeader	chipmunk_structs.h	/^typedef struct cpContactBufferHeader cpContactBufferHeader;$/;"	t	typeref:struct:cpContactBufferHeader
cpContactPointSet	chipmunk.h	/^typedef struct cpContactPointSet cpContactPointSet;$/;"	t	typeref:struct:cpContactPointSet
cpContactPointSet	cpArbiter.h	/^struct cpContactPointSet {$/;"	s
cpDampedRotarySpring	chipmunk.h	/^typedef struct cpDampedRotarySpring cpDampedRotarySpring;$/;"	t	typeref:struct:cpDampedRotarySpring
cpDampedRotarySpring	chipmunk_structs.h	/^struct cpDampedRotarySpring {$/;"	s
cpDampedRotarySpringTorqueFunc	cpDampedRotarySpring.h	/^typedef cpFloat (*cpDampedRotarySpringTorqueFunc)(struct cpConstraint *spring, cpFloat relativeAngle);$/;"	t
cpDampedSpring	chipmunk.h	/^typedef struct cpDampedSpring cpDampedSpring;$/;"	t	typeref:struct:cpDampedSpring
cpDampedSpring	chipmunk_structs.h	/^struct cpDampedSpring {$/;"	s
cpDampedSpringForceFunc	cpDampedSpring.h	/^typedef cpFloat (*cpDampedSpringForceFunc)(cpConstraint *spring, cpFloat dist);$/;"	t
cpDataPointer	chipmunk_types.h	/^	typedef CP_DATA_POINTER_TYPE cpDataPointer;$/;"	t
cpDataPointer	chipmunk_types.h	/^	typedef void * cpDataPointer;$/;"	t
cpFalse	chipmunk_types.h	/^	#define cpFalse /;"	d
cpFloat	chipmunk_types.h	/^	typedef double cpFloat;$/;"	t
cpFloat	chipmunk_types.h	/^	typedef float cpFloat;$/;"	t
cpGearJoint	chipmunk.h	/^typedef struct cpGearJoint cpGearJoint;$/;"	t	typeref:struct:cpGearJoint
cpGearJoint	chipmunk_structs.h	/^struct cpGearJoint {$/;"	s
cpGrooveJoint	chipmunk.h	/^typedef struct cpGrooveJoint cpGrooveJoint;$/;"	t	typeref:struct:cpGrooveJoint
cpGrooveJoint	chipmunk_structs.h	/^struct cpGrooveJoint {$/;"	s
cpGroup	chipmunk_types.h	/^	typedef CP_GROUP_TYPE cpGroup;$/;"	t
cpGroup	chipmunk_types.h	/^	typedef uintptr_t cpGroup;$/;"	t
cpHashSet	chipmunk.h	/^typedef struct cpHashSet cpHashSet;$/;"	t	typeref:struct:cpHashSet
cpHashSetEqlFunc	chipmunk_private.h	/^typedef cpBool (*cpHashSetEqlFunc)(void *ptr, void *elt);$/;"	t
cpHashSetFilterFunc	chipmunk_private.h	/^typedef cpBool (*cpHashSetFilterFunc)(void *elt, void *data);$/;"	t
cpHashSetIteratorFunc	chipmunk_private.h	/^typedef void (*cpHashSetIteratorFunc)(void *elt, void *data);$/;"	t
cpHashSetTransFunc	chipmunk_private.h	/^typedef void *(*cpHashSetTransFunc)(void *ptr, void *data);$/;"	t
cpHashValue	chipmunk_types.h	/^	typedef CP_HASH_VALUE_TYPE cpHashValue;$/;"	t
cpHashValue	chipmunk_types.h	/^	typedef uintptr_t cpHashValue;$/;"	t
cpHastySpace	cpHastySpace.h	/^typedef struct cpHastySpace cpHastySpace;$/;"	t	typeref:struct:cpHastySpace
cpMarchSampleFunc	cpMarch.h	/^typedef cpFloat (*cpMarchSampleFunc)(cpVect point, void *data);$/;"	t
cpMarchSegmentFunc	cpMarch.h	/^typedef void (*cpMarchSegmentFunc)(cpVect v0, cpVect v1, void *data);$/;"	t
cpMat2x2	chipmunk_types.h	/^typedef struct cpMat2x2 {$/;"	s
cpMat2x2	chipmunk_types.h	/^} cpMat2x2;$/;"	t	typeref:struct:cpMat2x2
cpMat2x2New	cpVect.h	/^cpMat2x2New(cpFloat a, cpFloat b, cpFloat c, cpFloat d)$/;"	f
cpMat2x2Transform	cpVect.h	/^cpMat2x2Transform(cpMat2x2 m, cpVect v)$/;"	f
cpPinJoint	chipmunk.h	/^typedef struct cpPinJoint cpPinJoint;$/;"	t	typeref:struct:cpPinJoint
cpPinJoint	chipmunk_structs.h	/^struct cpPinJoint {$/;"	s
cpPivotJoint	chipmunk.h	/^typedef struct cpPivotJoint cpPivotJoint;$/;"	t	typeref:struct:cpPivotJoint
cpPivotJoint	chipmunk_structs.h	/^struct cpPivotJoint {$/;"	s
cpPointQueryInfo	cpShape.h	/^typedef struct cpPointQueryInfo {$/;"	s
cpPointQueryInfo	cpShape.h	/^} cpPointQueryInfo;$/;"	t	typeref:struct:cpPointQueryInfo
cpPolyShape	chipmunk.h	/^typedef struct cpPolyShape cpPolyShape;$/;"	t	typeref:struct:cpPolyShape
cpPolyShape	chipmunk_structs.h	/^struct cpPolyShape {$/;"	s
cpPolyline	cpPolyline.h	/^typedef struct cpPolyline {$/;"	s
cpPolyline	cpPolyline.h	/^} cpPolyline;$/;"	t	typeref:struct:cpPolyline
cpPolylineConvexDecomposition_BETA	cpPolyline.h	/^#define cpPolylineConvexDecomposition_BETA /;"	d
cpPolylineSet	cpPolyline.h	/^typedef struct cpPolylineSet {$/;"	s
cpPolylineSet	cpPolyline.h	/^} cpPolylineSet;$/;"	t	typeref:struct:cpPolylineSet
cpPostStepCallback	chipmunk_structs.h	/^typedef struct cpPostStepCallback {$/;"	s
cpPostStepCallback	chipmunk_structs.h	/^} cpPostStepCallback;$/;"	t	typeref:struct:cpPostStepCallback
cpPostStepFunc	cpSpace.h	/^typedef void (*cpPostStepFunc)(cpSpace *space, void *key, void *data);$/;"	t
cpRatchetJoint	chipmunk.h	/^typedef struct cpRatchetJoint cpRatchetJoint;$/;"	t	typeref:struct:cpRatchetJoint
cpRatchetJoint	chipmunk_structs.h	/^struct cpRatchetJoint {$/;"	s
cpRotaryLimitJoint	chipmunk.h	/^typedef struct cpRotaryLimitJoint cpRotaryLimitJoint;$/;"	t	typeref:struct:cpRotaryLimitJoint
cpRotaryLimitJoint	chipmunk_structs.h	/^struct cpRotaryLimitJoint {$/;"	s
cpSegmentQueryInfo	cpShape.h	/^typedef struct cpSegmentQueryInfo {$/;"	s
cpSegmentQueryInfo	cpShape.h	/^} cpSegmentQueryInfo;$/;"	t	typeref:struct:cpSegmentQueryInfo
cpSegmentShape	chipmunk.h	/^typedef struct cpSegmentShape cpSegmentShape;$/;"	t	typeref:struct:cpSegmentShape
cpSegmentShape	chipmunk_structs.h	/^struct cpSegmentShape {$/;"	s
cpShape	chipmunk.h	/^typedef struct cpShape cpShape;$/;"	t	typeref:struct:cpShape
cpShape	chipmunk_structs.h	/^struct cpShape {$/;"	s
cpShapeActive	chipmunk_private.h	/^cpShapeActive(cpShape *shape)$/;"	f
cpShapeCacheDataImpl	chipmunk_structs.h	/^typedef cpBB (*cpShapeCacheDataImpl)(cpShape *shape, cpTransform transform);$/;"	t
cpShapeClass	chipmunk_structs.h	/^struct cpShapeClass {$/;"	s
cpShapeClass	chipmunk_structs.h	/^typedef struct cpShapeClass cpShapeClass;$/;"	t	typeref:struct:cpShapeClass
cpShapeDestroyImpl	chipmunk_structs.h	/^typedef void (*cpShapeDestroyImpl)(cpShape *shape);$/;"	t
cpShapeFilter	cpShape.h	/^typedef struct cpShapeFilter {$/;"	s
cpShapeFilter	cpShape.h	/^} cpShapeFilter;$/;"	t	typeref:struct:cpShapeFilter
cpShapeFilterNew	cpShape.h	/^cpShapeFilterNew(cpGroup group, cpBitmask categories, cpBitmask mask)$/;"	f
cpShapeFilterReject	chipmunk_private.h	/^cpShapeFilterReject(cpShapeFilter a, cpShapeFilter b)$/;"	f
cpShapeMassInfo	chipmunk_structs.h	/^struct cpShapeMassInfo {$/;"	s
cpShapePointQueryImpl	chipmunk_structs.h	/^typedef void (*cpShapePointQueryImpl)(const cpShape *shape, cpVect p, cpPointQueryInfo *info);$/;"	t
cpShapeSegmentQueryImpl	chipmunk_structs.h	/^typedef void (*cpShapeSegmentQueryImpl)(const cpShape *shape, cpVect a, cpVect b, cpFloat radius, cpSegmentQueryInfo *info);$/;"	t
cpShapeType	chipmunk_structs.h	/^typedef enum cpShapeType{$/;"	g
cpShapeType	chipmunk_structs.h	/^} cpShapeType;$/;"	t	typeref:enum:cpShapeType
cpSimpleMotor	chipmunk_structs.h	/^struct cpSimpleMotor {$/;"	s
cpSimpleMotor	cpSimpleMotor.h	/^typedef struct cpSimpleMotor cpSimpleMotor;$/;"	t	typeref:struct:cpSimpleMotor
cpSimpleMotorJoint	chipmunk.h	/^typedef struct cpSimpleMotorJoint cpSimpleMotorJoint;$/;"	t	typeref:struct:cpSimpleMotorJoint
cpSlideJoint	chipmunk.h	/^typedef struct cpSlideJoint cpSlideJoint;$/;"	t	typeref:struct:cpSlideJoint
cpSlideJoint	chipmunk_structs.h	/^struct cpSlideJoint {$/;"	s
cpSpace	chipmunk.h	/^typedef struct cpSpace cpSpace;$/;"	t	typeref:struct:cpSpace
cpSpace	chipmunk_structs.h	/^struct cpSpace {$/;"	s
cpSpaceArbiterApplyImpulseFunc	chipmunk_structs.h	/^typedef void (*cpSpaceArbiterApplyImpulseFunc)(cpArbiter *arb);$/;"	t
cpSpaceArrayForBodyType	chipmunk_private.h	/^cpSpaceArrayForBodyType(cpSpace *space, cpBodyType type)$/;"	f
cpSpaceBBQueryFunc	cpSpace.h	/^typedef void (*cpSpaceBBQueryFunc)(cpShape *shape, void *data);$/;"	t
cpSpaceBodyIteratorFunc	cpSpace.h	/^typedef void (*cpSpaceBodyIteratorFunc)(cpBody *body, void *data);$/;"	t
cpSpaceConstraintIteratorFunc	cpSpace.h	/^typedef void (*cpSpaceConstraintIteratorFunc)(cpConstraint *constraint, void *data);$/;"	t
cpSpaceDebugColor	cpSpace.h	/^typedef struct cpSpaceDebugColor {$/;"	s
cpSpaceDebugColor	cpSpace.h	/^} cpSpaceDebugColor;$/;"	t	typeref:struct:cpSpaceDebugColor
cpSpaceDebugDrawCircleImpl	cpSpace.h	/^typedef void (*cpSpaceDebugDrawCircleImpl)(cpVect pos, cpFloat angle, cpFloat radius, cpSpaceDebugColor outlineColor, cpSpaceDebugColor fillColor, cpDataPointer data);$/;"	t
cpSpaceDebugDrawColorForShapeImpl	cpSpace.h	/^typedef cpSpaceDebugColor (*cpSpaceDebugDrawColorForShapeImpl)(cpShape *shape, cpDataPointer data);$/;"	t
cpSpaceDebugDrawDotImpl	cpSpace.h	/^typedef void (*cpSpaceDebugDrawDotImpl)(cpFloat size, cpVect pos, cpSpaceDebugColor color, cpDataPointer data);$/;"	t
cpSpaceDebugDrawFatSegmentImpl	cpSpace.h	/^typedef void (*cpSpaceDebugDrawFatSegmentImpl)(cpVect a, cpVect b, cpFloat radius, cpSpaceDebugColor outlineColor, cpSpaceDebugColor fillColor, cpDataPointer data);$/;"	t
cpSpaceDebugDrawFlags	cpSpace.h	/^typedef enum cpSpaceDebugDrawFlags {$/;"	g
cpSpaceDebugDrawFlags	cpSpace.h	/^} cpSpaceDebugDrawFlags;$/;"	t	typeref:enum:cpSpaceDebugDrawFlags
cpSpaceDebugDrawOptions	cpSpace.h	/^typedef struct cpSpaceDebugDrawOptions {$/;"	s
cpSpaceDebugDrawOptions	cpSpace.h	/^} cpSpaceDebugDrawOptions;$/;"	t	typeref:struct:cpSpaceDebugDrawOptions
cpSpaceDebugDrawPolygonImpl	cpSpace.h	/^typedef void (*cpSpaceDebugDrawPolygonImpl)(int count, const cpVect *verts, cpFloat radius, cpSpaceDebugColor outlineColor, cpSpaceDebugColor fillColor, cpDataPointer data);$/;"	t
cpSpaceDebugDrawSegmentImpl	cpSpace.h	/^typedef void (*cpSpaceDebugDrawSegmentImpl)(cpVect a, cpVect b, cpSpaceDebugColor color, cpDataPointer data);$/;"	t
cpSpaceHash	cpSpatialIndex.h	/^typedef struct cpSpaceHash cpSpaceHash;$/;"	t	typeref:struct:cpSpaceHash
cpSpacePointQueryFunc	cpSpace.h	/^typedef void (*cpSpacePointQueryFunc)(cpShape *shape, cpVect point, cpFloat distance, cpVect gradient, void *data);$/;"	t
cpSpaceSegmentQueryFunc	cpSpace.h	/^typedef void (*cpSpaceSegmentQueryFunc)(cpShape *shape, cpVect point, cpVect normal, cpFloat alpha, void *data);$/;"	t
cpSpaceShapeIteratorFunc	cpSpace.h	/^typedef void (*cpSpaceShapeIteratorFunc)(cpShape *shape, void *data);$/;"	t
cpSpaceShapeQueryFunc	cpSpace.h	/^typedef void (*cpSpaceShapeQueryFunc)(cpShape *shape, cpContactPointSet *points, void *data);$/;"	t
cpSpaceUncacheArbiter	chipmunk_private.h	/^cpSpaceUncacheArbiter(cpSpace *space, cpArbiter *arb)$/;"	f
cpSpatialIndex	cpSpatialIndex.h	/^struct cpSpatialIndex {$/;"	s
cpSpatialIndex	cpSpatialIndex.h	/^typedef struct cpSpatialIndex cpSpatialIndex;$/;"	t	typeref:struct:cpSpatialIndex
cpSpatialIndexBBFunc	cpSpatialIndex.h	/^typedef cpBB (*cpSpatialIndexBBFunc)(void *obj);$/;"	t
cpSpatialIndexClass	cpSpatialIndex.h	/^struct cpSpatialIndexClass {$/;"	s
cpSpatialIndexClass	cpSpatialIndex.h	/^typedef struct cpSpatialIndexClass cpSpatialIndexClass;$/;"	t	typeref:struct:cpSpatialIndexClass
cpSpatialIndexContains	chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexContains);$/;"	v
cpSpatialIndexContains	cpSpatialIndex.h	/^static inline cpBool cpSpatialIndexContains(cpSpatialIndex *index, void *obj, cpHashValue hashid)$/;"	f
cpSpatialIndexContainsImpl	cpSpatialIndex.h	/^typedef cpBool (*cpSpatialIndexContainsImpl)(cpSpatialIndex *index, void *obj, cpHashValue hashid);$/;"	t
cpSpatialIndexCount	chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexCount);$/;"	v
cpSpatialIndexCount	cpSpatialIndex.h	/^static inline int cpSpatialIndexCount(cpSpatialIndex *index)$/;"	f
cpSpatialIndexCountImpl	cpSpatialIndex.h	/^typedef int (*cpSpatialIndexCountImpl)(cpSpatialIndex *index);$/;"	t
cpSpatialIndexDestroy	chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexDestroy);$/;"	v
cpSpatialIndexDestroy	cpSpatialIndex.h	/^static inline void cpSpatialIndexDestroy(cpSpatialIndex *index)$/;"	f
cpSpatialIndexDestroyImpl	cpSpatialIndex.h	/^typedef void (*cpSpatialIndexDestroyImpl)(cpSpatialIndex *index);$/;"	t
cpSpatialIndexEach	chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexEach);$/;"	v
cpSpatialIndexEach	cpSpatialIndex.h	/^static inline void cpSpatialIndexEach(cpSpatialIndex *index, cpSpatialIndexIteratorFunc func, void *data)$/;"	f
cpSpatialIndexEachImpl	cpSpatialIndex.h	/^typedef void (*cpSpatialIndexEachImpl)(cpSpatialIndex *index, cpSpatialIndexIteratorFunc func, void *data);$/;"	t
cpSpatialIndexInsert	chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexInsert);$/;"	v
cpSpatialIndexInsert	cpSpatialIndex.h	/^static inline void cpSpatialIndexInsert(cpSpatialIndex *index, void *obj, cpHashValue hashid)$/;"	f
cpSpatialIndexInsertImpl	cpSpatialIndex.h	/^typedef void (*cpSpatialIndexInsertImpl)(cpSpatialIndex *index, void *obj, cpHashValue hashid);$/;"	t
cpSpatialIndexIteratorFunc	cpSpatialIndex.h	/^typedef void (*cpSpatialIndexIteratorFunc)(void *obj, void *data);$/;"	t
cpSpatialIndexQuery	chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexQuery);$/;"	v
cpSpatialIndexQuery	cpSpatialIndex.h	/^static inline void cpSpatialIndexQuery(cpSpatialIndex *index, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data)$/;"	f
cpSpatialIndexQueryFunc	cpSpatialIndex.h	/^typedef cpCollisionID (*cpSpatialIndexQueryFunc)(void *obj1, void *obj2, cpCollisionID id, void *data);$/;"	t
cpSpatialIndexQueryImpl	cpSpatialIndex.h	/^typedef void (*cpSpatialIndexQueryImpl)(cpSpatialIndex *index, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data);$/;"	t
cpSpatialIndexReindex	chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexReindex);$/;"	v
cpSpatialIndexReindex	cpSpatialIndex.h	/^static inline void cpSpatialIndexReindex(cpSpatialIndex *index)$/;"	f
cpSpatialIndexReindexImpl	cpSpatialIndex.h	/^typedef void (*cpSpatialIndexReindexImpl)(cpSpatialIndex *index);$/;"	t
cpSpatialIndexReindexObject	chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexReindexObject);$/;"	v
cpSpatialIndexReindexObject	cpSpatialIndex.h	/^static inline void cpSpatialIndexReindexObject(cpSpatialIndex *index, void *obj, cpHashValue hashid)$/;"	f
cpSpatialIndexReindexObjectImpl	cpSpatialIndex.h	/^typedef void (*cpSpatialIndexReindexObjectImpl)(cpSpatialIndex *index, void *obj, cpHashValue hashid);$/;"	t
cpSpatialIndexReindexQuery	chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexReindexQuery);$/;"	v
cpSpatialIndexReindexQuery	cpSpatialIndex.h	/^static inline void cpSpatialIndexReindexQuery(cpSpatialIndex *index, cpSpatialIndexQueryFunc func, void *data)$/;"	f
cpSpatialIndexReindexQueryImpl	cpSpatialIndex.h	/^typedef void (*cpSpatialIndexReindexQueryImpl)(cpSpatialIndex *index, cpSpatialIndexQueryFunc func, void *data);$/;"	t
cpSpatialIndexRemove	chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexRemove);$/;"	v
cpSpatialIndexRemove	cpSpatialIndex.h	/^static inline void cpSpatialIndexRemove(cpSpatialIndex *index, void *obj, cpHashValue hashid)$/;"	f
cpSpatialIndexRemoveImpl	cpSpatialIndex.h	/^typedef void (*cpSpatialIndexRemoveImpl)(cpSpatialIndex *index, void *obj, cpHashValue hashid);$/;"	t
cpSpatialIndexSegmentQuery	chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexSegmentQuery);$/;"	v
cpSpatialIndexSegmentQuery	cpSpatialIndex.h	/^static inline void cpSpatialIndexSegmentQuery(cpSpatialIndex *index, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data)$/;"	f
cpSpatialIndexSegmentQueryFunc	cpSpatialIndex.h	/^typedef cpFloat (*cpSpatialIndexSegmentQueryFunc)(void *obj1, void *obj2, void *data);$/;"	t
cpSpatialIndexSegmentQueryImpl	cpSpatialIndex.h	/^typedef void (*cpSpatialIndexSegmentQueryImpl)(cpSpatialIndex *index, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data);$/;"	t
cpSplittingPlane	chipmunk_structs.h	/^struct cpSplittingPlane {$/;"	s
cpSweep1D	cpSpatialIndex.h	/^typedef struct cpSweep1D cpSweep1D;$/;"	t	typeref:struct:cpSweep1D
cpTimestamp	chipmunk_types.h	/^	typedef CP_TIMESTAMP_TYPE cpTimestamp;$/;"	t
cpTimestamp	chipmunk_types.h	/^	typedef unsigned int cpTimestamp;$/;"	t
cpTransform	chipmunk_types.h	/^	typedef CGAffineTransform cpTransform;$/;"	t
cpTransform	chipmunk_types.h	/^	typedef struct cpTransform {$/;"	s
cpTransform	chipmunk_types.h	/^	} cpTransform;$/;"	t	typeref:struct:cpTransform
cpTransformAxialScale	cpTransform.h	/^cpTransformAxialScale(cpVect axis, cpVect pivot, cpFloat scale)$/;"	f
cpTransformBoneScale	cpTransform.h	/^cpTransformBoneScale(cpVect v0, cpVect v1)$/;"	f
cpTransformIdentity	cpTransform.h	/^static const cpTransform cpTransformIdentity = {1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f};$/;"	v
cpTransformInverse	cpTransform.h	/^cpTransformInverse(cpTransform t)$/;"	f
cpTransformMult	cpTransform.h	/^cpTransformMult(cpTransform t1, cpTransform t2)$/;"	f
cpTransformNew	cpTransform.h	/^cpTransformNew(cpFloat a, cpFloat b, cpFloat c, cpFloat d, cpFloat tx, cpFloat ty)$/;"	f
cpTransformNewTranspose	cpTransform.h	/^cpTransformNewTranspose(cpFloat a, cpFloat c, cpFloat tx, cpFloat b, cpFloat d, cpFloat ty)$/;"	f
cpTransformOrtho	cpTransform.h	/^cpTransformOrtho(cpBB bb)$/;"	f
cpTransformPoint	cpTransform.h	/^cpTransformPoint(cpTransform t, cpVect p)$/;"	f
cpTransformRigid	cpTransform.h	/^cpTransformRigid(cpVect translate, cpFloat radians)$/;"	f
cpTransformRigidInverse	cpTransform.h	/^cpTransformRigidInverse(cpTransform t)$/;"	f
cpTransformRotate	cpTransform.h	/^cpTransformRotate(cpFloat radians)$/;"	f
cpTransformScale	cpTransform.h	/^cpTransformScale(cpFloat scaleX, cpFloat scaleY)$/;"	f
cpTransformTranslate	cpTransform.h	/^cpTransformTranslate(cpVect translate)$/;"	f
cpTransformVect	cpTransform.h	/^cpTransformVect(cpTransform t, cpVect v)$/;"	f
cpTransformWrap	cpTransform.h	/^cpTransformWrap(cpTransform outer, cpTransform inner)$/;"	f
cpTransformWrapInverse	cpTransform.h	/^cpTransformWrapInverse(cpTransform outer, cpTransform inner)$/;"	f
cpTransformbBB	cpTransform.h	/^cpTransformbBB(cpTransform t, cpBB bb)$/;"	f
cpTrue	chipmunk_types.h	/^	#define cpTrue /;"	d
cpVect	chipmunk_types.h	/^	typedef CGPoint cpVect;$/;"	t
cpVect	chipmunk_types.h	/^	typedef struct cpVect{cpFloat x,y;} cpVect;$/;"	s
cpVect	chipmunk_types.h	/^	typedef struct cpVect{cpFloat x,y;} cpVect;$/;"	t	typeref:struct:cpVect
cpcalloc	chipmunk.h	/^	#define cpcalloc /;"	d
cpfabs	chipmunk_ffi.h	/^MAKE_REF(cpfabs);$/;"	v
cpfabs	chipmunk_types.h	/^static inline cpFloat cpfabs(cpFloat f)$/;"	f
cpfacos	chipmunk_types.h	/^	#define cpfacos /;"	d
cpfatan2	chipmunk_types.h	/^	#define cpfatan2 /;"	d
cpfceil	chipmunk_types.h	/^	#define cpfceil /;"	d
cpfclamp	chipmunk_ffi.h	/^MAKE_REF(cpfclamp);$/;"	v
cpfclamp	chipmunk_types.h	/^static inline cpFloat cpfclamp(cpFloat f, cpFloat min, cpFloat max)$/;"	f
cpfclamp01	chipmunk_types.h	/^static inline cpFloat cpfclamp01(cpFloat f)$/;"	f
cpfcos	chipmunk_types.h	/^	#define cpfcos /;"	d
cpfexp	chipmunk_types.h	/^	#define cpfexp /;"	d
cpffloor	chipmunk_types.h	/^	#define cpffloor /;"	d
cpflerp	chipmunk_ffi.h	/^MAKE_REF(cpflerp);$/;"	v
cpflerp	chipmunk_types.h	/^static inline cpFloat cpflerp(cpFloat f1, cpFloat f2, cpFloat t)$/;"	f
cpflerpconst	chipmunk_ffi.h	/^MAKE_REF(cpflerpconst);$/;"	v
cpflerpconst	chipmunk_types.h	/^static inline cpFloat cpflerpconst(cpFloat f1, cpFloat f2, cpFloat d)$/;"	f
cpfmax	chipmunk_ffi.h	/^MAKE_REF(cpfmax);$/;"	v
cpfmax	chipmunk_types.h	/^static inline cpFloat cpfmax(cpFloat a, cpFloat b)$/;"	f
cpfmin	chipmunk_ffi.h	/^MAKE_REF(cpfmin);$/;"	v
cpfmin	chipmunk_types.h	/^static inline cpFloat cpfmin(cpFloat a, cpFloat b)$/;"	f
cpfmod	chipmunk_types.h	/^	#define cpfmod /;"	d
cpfpow	chipmunk_types.h	/^	#define cpfpow /;"	d
cpfree	chipmunk.h	/^	#define cpfree /;"	d
cpfsin	chipmunk_types.h	/^	#define cpfsin /;"	d
cpfsqrt	chipmunk_types.h	/^	#define cpfsqrt /;"	d
cprealloc	chipmunk.h	/^	#define cprealloc /;"	d
cpv	chipmunk_ffi.h	/^MAKE_REF(cpv); \/\/ makes a variable named _cpv that contains the function pointer for cpv()$/;"	v
cpv	cpVect.h	/^static inline cpVect cpv(const cpFloat x, const cpFloat y)$/;"	f
cpvadd	chipmunk_ffi.h	/^MAKE_REF(cpvadd);$/;"	v
cpvadd	cpVect.h	/^static inline cpVect cpvadd(const cpVect v1, const cpVect v2)$/;"	f
cpvclamp	chipmunk_ffi.h	/^MAKE_REF(cpvclamp);$/;"	v
cpvclamp	cpVect.h	/^static inline cpVect cpvclamp(const cpVect v, const cpFloat len)$/;"	f
cpvcross	chipmunk_ffi.h	/^MAKE_REF(cpvcross);$/;"	v
cpvcross	cpVect.h	/^static inline cpFloat cpvcross(const cpVect v1, const cpVect v2)$/;"	f
cpvdist	chipmunk_ffi.h	/^MAKE_REF(cpvdist);$/;"	v
cpvdist	cpVect.h	/^static inline cpFloat cpvdist(const cpVect v1, const cpVect v2)$/;"	f
cpvdistsq	chipmunk_ffi.h	/^MAKE_REF(cpvdistsq);$/;"	v
cpvdistsq	cpVect.h	/^static inline cpFloat cpvdistsq(const cpVect v1, const cpVect v2)$/;"	f
cpvdot	chipmunk_ffi.h	/^MAKE_REF(cpvdot);$/;"	v
cpvdot	cpVect.h	/^static inline cpFloat cpvdot(const cpVect v1, const cpVect v2)$/;"	f
cpveql	chipmunk_ffi.h	/^MAKE_REF(cpveql);$/;"	v
cpveql	cpVect.h	/^static inline cpBool cpveql(const cpVect v1, const cpVect v2)$/;"	f
cpvforangle	chipmunk_ffi.h	/^MAKE_REF(cpvforangle);$/;"	v
cpvforangle	cpVect.h	/^static inline cpVect cpvforangle(const cpFloat a)$/;"	f
cpvlength	chipmunk_ffi.h	/^MAKE_REF(cpvlength);$/;"	v
cpvlength	cpVect.h	/^static inline cpFloat cpvlength(const cpVect v)$/;"	f
cpvlengthsq	chipmunk_ffi.h	/^MAKE_REF(cpvlengthsq);$/;"	v
cpvlengthsq	cpVect.h	/^static inline cpFloat cpvlengthsq(const cpVect v)$/;"	f
cpvlerp	chipmunk_ffi.h	/^MAKE_REF(cpvlerp);$/;"	v
cpvlerp	cpVect.h	/^static inline cpVect cpvlerp(const cpVect v1, const cpVect v2, const cpFloat t)$/;"	f
cpvlerpconst	chipmunk_ffi.h	/^MAKE_REF(cpvlerpconst);$/;"	v
cpvlerpconst	cpVect.h	/^static inline cpVect cpvlerpconst(cpVect v1, cpVect v2, cpFloat d)$/;"	f
cpvmult	chipmunk_ffi.h	/^MAKE_REF(cpvmult);$/;"	v
cpvmult	cpVect.h	/^static inline cpVect cpvmult(const cpVect v, const cpFloat s)$/;"	f
cpvnear	chipmunk_ffi.h	/^MAKE_REF(cpvnear);$/;"	v
cpvnear	cpVect.h	/^static inline cpBool cpvnear(const cpVect v1, const cpVect v2, const cpFloat dist)$/;"	f
cpvneg	chipmunk_ffi.h	/^MAKE_REF(cpvneg);$/;"	v
cpvneg	cpVect.h	/^static inline cpVect cpvneg(const cpVect v)$/;"	f
cpvnormalize	chipmunk_ffi.h	/^MAKE_REF(cpvnormalize);$/;"	v
cpvnormalize	cpVect.h	/^static inline cpVect cpvnormalize(const cpVect v)$/;"	f
cpvperp	chipmunk_ffi.h	/^MAKE_REF(cpvperp);$/;"	v
cpvperp	cpVect.h	/^static inline cpVect cpvperp(const cpVect v)$/;"	f
cpvproject	chipmunk_ffi.h	/^MAKE_REF(cpvproject);$/;"	v
cpvproject	cpVect.h	/^static inline cpVect cpvproject(const cpVect v1, const cpVect v2)$/;"	f
cpvrotate	chipmunk_ffi.h	/^MAKE_REF(cpvrotate);$/;"	v
cpvrotate	cpVect.h	/^static inline cpVect cpvrotate(const cpVect v1, const cpVect v2)$/;"	f
cpvrperp	chipmunk_ffi.h	/^MAKE_REF(cpvrperp);$/;"	v
cpvrperp	cpVect.h	/^static inline cpVect cpvrperp(const cpVect v)$/;"	f
cpvslerp	cpVect.h	/^cpvslerp(const cpVect v1, const cpVect v2, const cpFloat t)$/;"	f
cpvslerpconst	cpVect.h	/^cpvslerpconst(const cpVect v1, const cpVect v2, const cpFloat a)$/;"	f
cpvsub	chipmunk_ffi.h	/^MAKE_REF(cpvsub);$/;"	v
cpvsub	cpVect.h	/^static inline cpVect cpvsub(const cpVect v1, const cpVect v2)$/;"	f
cpvtoangle	chipmunk_ffi.h	/^MAKE_REF(cpvtoangle);$/;"	v
cpvtoangle	cpVect.h	/^static inline cpFloat cpvtoangle(const cpVect v)$/;"	f
cpvunrotate	chipmunk_ffi.h	/^MAKE_REF(cpvunrotate);$/;"	v
cpvunrotate	cpVect.h	/^static inline cpVect cpvunrotate(const cpVect v1, const cpVect v2)$/;"	f
cpvzero	cpVect.h	/^static const cpVect cpvzero = {0.0f,0.0f};$/;"	v
curr_dt	chipmunk_structs.h	/^	cpFloat curr_dt;$/;"	m	struct:cpSpace
d	chipmunk_types.h	/^		cpFloat a, b, c, d, tx, ty;$/;"	m	struct:cpTransform
d	chipmunk_types.h	/^	cpFloat a, b, c, d;$/;"	m	struct:cpMat2x2
damping	chipmunk_structs.h	/^	cpFloat damping;$/;"	m	struct:cpDampedRotarySpring
damping	chipmunk_structs.h	/^	cpFloat damping;$/;"	m	struct:cpDampedSpring
damping	chipmunk_structs.h	/^	cpFloat damping;$/;"	m	struct:cpSpace
data	chipmunk_structs.h	/^	cpDataPointer data;$/;"	m	struct:cpArbiter
data	chipmunk_structs.h	/^	void *data;$/;"	m	struct:cpPostStepCallback
data	cpSpace.h	/^	cpDataPointer data;$/;"	m	struct:cpSpaceDebugDrawOptions
defaultHandler	chipmunk_structs.h	/^	cpCollisionHandler defaultHandler;$/;"	m	struct:cpSpace
destroy	chipmunk_structs.h	/^	cpShapeDestroyImpl destroy;$/;"	m	struct:cpShapeClass
destroy	cpSpatialIndex.h	/^	cpSpatialIndexDestroyImpl destroy;$/;"	m	struct:cpSpatialIndexClass
dist	chipmunk_structs.h	/^	cpFloat dist;$/;"	m	struct:cpPinJoint
distance	chipmunk.h	/^typedef void (^cpSpacePointQueryBlock)(cpShape *shape, cpVect point, cpFloat distance, cpVect gradient);$/;"	v
distance	cpArbiter.h	/^		cpFloat distance;$/;"	m	struct:cpContactPointSet::__anon2
distance	cpShape.h	/^	cpFloat distance;$/;"	m	struct:cpPointQueryInfo
drawCircle	cpSpace.h	/^	cpSpaceDebugDrawCircleImpl drawCircle;$/;"	m	struct:cpSpaceDebugDrawOptions
drawDot	cpSpace.h	/^	cpSpaceDebugDrawDotImpl drawDot;$/;"	m	struct:cpSpaceDebugDrawOptions
drawFatSegment	cpSpace.h	/^	cpSpaceDebugDrawFatSegmentImpl drawFatSegment;$/;"	m	struct:cpSpaceDebugDrawOptions
drawPolygon	cpSpace.h	/^	cpSpaceDebugDrawPolygonImpl drawPolygon;$/;"	m	struct:cpSpaceDebugDrawOptions
drawSegment	cpSpace.h	/^	cpSpaceDebugDrawSegmentImpl drawSegment;$/;"	m	struct:cpSpaceDebugDrawOptions
dynamicBodies	chipmunk_structs.h	/^	cpArray *dynamicBodies;$/;"	m	struct:cpSpace
dynamicIndex	cpSpatialIndex.h	/^	cpSpatialIndex *staticIndex, *dynamicIndex;$/;"	m	struct:cpSpatialIndex
dynamicShapes	chipmunk_structs.h	/^	cpSpatialIndex *dynamicShapes;$/;"	m	struct:cpSpace
e	chipmunk_structs.h	/^	cpFloat e;$/;"	m	struct:cpArbiter
e	chipmunk_structs.h	/^	cpFloat e;$/;"	m	struct:cpShape
each	cpSpatialIndex.h	/^	cpSpatialIndexEachImpl each;$/;"	m	struct:cpSpatialIndexClass
errorBias	chipmunk_structs.h	/^	cpFloat errorBias;$/;"	m	struct:cpConstraint
f	chipmunk_structs.h	/^	cpVect f;$/;"	m	struct:cpBody
filter	chipmunk_structs.h	/^	cpShapeFilter filter;$/;"	m	struct:cpShape
flags	cpSpace.h	/^	cpSpaceDebugDrawFlags flags;$/;"	m	struct:cpSpaceDebugDrawOptions
func	chipmunk_structs.h	/^	cpPostStepFunc func;$/;"	m	struct:cpPostStepCallback
g	cpSpace.h	/^	float r, g, b, a;$/;"	m	struct:cpSpaceDebugColor
getImpulse	chipmunk_structs.h	/^	cpConstraintGetImpulseImpl getImpulse;$/;"	m	struct:cpConstraintClass
gradient	chipmunk.h	/^typedef void (^cpSpacePointQueryBlock)(cpShape *shape, cpVect point, cpFloat distance, cpVect gradient);$/;"	v
gradient	cpShape.h	/^	cpVect gradient;$/;"	m	struct:cpPointQueryInfo
gravity	chipmunk_structs.h	/^	cpVect gravity;$/;"	m	struct:cpSpace
group	cpShape.h	/^	cpGroup group;$/;"	m	struct:cpShapeFilter
grv_a	chipmunk_structs.h	/^	cpVect grv_n, grv_a, grv_b;$/;"	m	struct:cpGrooveJoint
grv_b	chipmunk_structs.h	/^	cpVect grv_n, grv_a, grv_b;$/;"	m	struct:cpGrooveJoint
grv_n	chipmunk_structs.h	/^	cpVect grv_n, grv_a, grv_b;$/;"	m	struct:cpGrooveJoint
grv_tn	chipmunk_structs.h	/^	cpVect grv_tn;$/;"	m	struct:cpGrooveJoint
handler	chipmunk_structs.h	/^	cpCollisionHandler *handler, *handlerA, *handlerB;$/;"	m	struct:cpArbiter
handlerA	chipmunk_structs.h	/^	cpCollisionHandler *handler, *handlerA, *handlerB;$/;"	m	struct:cpArbiter
handlerB	chipmunk_structs.h	/^	cpCollisionHandler *handler, *handlerA, *handlerB;$/;"	m	struct:cpArbiter
hash	chipmunk_structs.h	/^	cpHashValue hash;$/;"	m	struct:cpContact
hashid	chipmunk_structs.h	/^	cpHashValue hashid;$/;"	m	struct:cpShape
i	chipmunk_structs.h	/^	cpFloat i;$/;"	m	struct:cpBody
i	chipmunk_structs.h	/^	cpFloat i;$/;"	m	struct:cpShapeMassInfo
iSum	chipmunk_structs.h	/^	cpFloat iSum;$/;"	m	struct:cpDampedRotarySpring
iSum	chipmunk_structs.h	/^	cpFloat iSum;$/;"	m	struct:cpGearJoint
iSum	chipmunk_structs.h	/^	cpFloat iSum;$/;"	m	struct:cpRatchetJoint
iSum	chipmunk_structs.h	/^	cpFloat iSum;$/;"	m	struct:cpRotaryLimitJoint
iSum	chipmunk_structs.h	/^	cpFloat iSum;$/;"	m	struct:cpSimpleMotor
i_inv	chipmunk_structs.h	/^	cpFloat i_inv;$/;"	m	struct:cpBody
id	chipmunk_structs.h	/^	cpCollisionID id;$/;"	m	struct:cpCollisionInfo
idleSpeedThreshold	chipmunk_structs.h	/^	cpFloat idleSpeedThreshold;$/;"	m	struct:cpSpace
idleTime	chipmunk_structs.h	/^		cpFloat idleTime;$/;"	m	struct:cpBody::__anon1
insert	cpSpatialIndex.h	/^	cpSpatialIndexInsertImpl insert;$/;"	m	struct:cpSpatialIndexClass
iterations	chipmunk_structs.h	/^	int iterations;$/;"	m	struct:cpSpace
jAcc	chipmunk_structs.h	/^	cpFloat jAcc;$/;"	m	struct:cpDampedRotarySpring
jAcc	chipmunk_structs.h	/^	cpFloat jAcc;$/;"	m	struct:cpDampedSpring
jAcc	chipmunk_structs.h	/^	cpFloat jAcc;$/;"	m	struct:cpGearJoint
jAcc	chipmunk_structs.h	/^	cpFloat jAcc;$/;"	m	struct:cpRatchetJoint
jAcc	chipmunk_structs.h	/^	cpFloat jAcc;$/;"	m	struct:cpRotaryLimitJoint
jAcc	chipmunk_structs.h	/^	cpFloat jAcc;$/;"	m	struct:cpSimpleMotor
jAcc	chipmunk_structs.h	/^	cpVect jAcc;$/;"	m	struct:cpGrooveJoint
jAcc	chipmunk_structs.h	/^	cpVect jAcc;$/;"	m	struct:cpPivotJoint
jBias	chipmunk_structs.h	/^	cpFloat jnAcc, jtAcc, jBias;$/;"	m	struct:cpContact
jnAcc	chipmunk_structs.h	/^	cpFloat jnAcc, jtAcc, jBias;$/;"	m	struct:cpContact
jnAcc	chipmunk_structs.h	/^	cpFloat jnAcc;$/;"	m	struct:cpPinJoint
jnAcc	chipmunk_structs.h	/^	cpFloat jnAcc;$/;"	m	struct:cpSlideJoint
jtAcc	chipmunk_structs.h	/^	cpFloat jnAcc, jtAcc, jBias;$/;"	m	struct:cpContact
k	chipmunk_structs.h	/^	cpMat2x2 k;$/;"	m	struct:cpGrooveJoint
k	chipmunk_structs.h	/^	cpMat2x2 k;$/;"	m	struct:cpPivotJoint
k_scalar	chipmunk_private.h	/^k_scalar(cpBody *a, cpBody *b, cpVect r1, cpVect r2, cpVect n)$/;"	f
k_scalar_body	chipmunk_private.h	/^k_scalar_body(cpBody *body, cpVect r, cpVect n)$/;"	f
k_tensor	chipmunk_private.h	/^k_tensor(cpBody *a, cpBody *b, cpVect r1, cpVect r2)$/;"	f
key	chipmunk_structs.h	/^	void *key;$/;"	m	struct:cpPostStepCallback
klass	chipmunk_structs.h	/^	const cpConstraintClass *klass;$/;"	m	struct:cpConstraint
klass	chipmunk_structs.h	/^	const cpShapeClass *klass;$/;"	m	struct:cpShape
klass	cpSpatialIndex.h	/^	cpSpatialIndexClass *klass;$/;"	m	struct:cpSpatialIndex
l	cpBB.h	/^	cpFloat l, b, r ,t;$/;"	m	struct:cpBB
lines	cpPolyline.h	/^  cpPolyline **lines;$/;"	m	struct:cpPolylineSet
locked	chipmunk_structs.h	/^	unsigned int locked;$/;"	m	struct:cpSpace
m	chipmunk_structs.h	/^	cpFloat m;$/;"	m	struct:cpBody
m	chipmunk_structs.h	/^	cpFloat m;$/;"	m	struct:cpShapeMassInfo
m_inv	chipmunk_structs.h	/^	cpFloat m_inv;$/;"	m	struct:cpBody
mask	cpShape.h	/^	cpBitmask mask;$/;"	m	struct:cpShapeFilter
massInfo	chipmunk_structs.h	/^	struct cpShapeMassInfo massInfo;$/;"	m	struct:cpShape	typeref:struct:cpShape::cpShapeMassInfo
max	chipmunk_structs.h	/^	cpFloat min, max;$/;"	m	struct:cpRotaryLimitJoint
max	chipmunk_structs.h	/^	cpFloat min, max;$/;"	m	struct:cpSlideJoint
max	chipmunk_structs.h	/^	int num, max;$/;"	m	struct:cpArray
maxBias	chipmunk_structs.h	/^	cpFloat maxBias;$/;"	m	struct:cpConstraint
maxForce	chipmunk_structs.h	/^	cpFloat maxForce;$/;"	m	struct:cpConstraint
min	chipmunk_structs.h	/^	cpFloat min, max;$/;"	m	struct:cpRotaryLimitJoint
min	chipmunk_structs.h	/^	cpFloat min, max;$/;"	m	struct:cpSlideJoint
n	chipmunk_structs.h	/^	cpVect a, b, n;$/;"	m	struct:cpSegmentShape
n	chipmunk_structs.h	/^	cpVect n;$/;"	m	struct:cpArbiter
n	chipmunk_structs.h	/^	cpVect n;$/;"	m	struct:cpCollisionInfo
n	chipmunk_structs.h	/^	cpVect n;$/;"	m	struct:cpDampedSpring
n	chipmunk_structs.h	/^	cpVect n;$/;"	m	struct:cpPinJoint
n	chipmunk_structs.h	/^	cpVect n;$/;"	m	struct:cpSlideJoint
n	chipmunk_structs.h	/^	cpVect v0, n;$/;"	m	struct:cpSplittingPlane
nMass	chipmunk_structs.h	/^	cpFloat nMass, tMass;$/;"	m	struct:cpContact
nMass	chipmunk_structs.h	/^	cpFloat nMass;$/;"	m	struct:cpDampedSpring
nMass	chipmunk_structs.h	/^	cpFloat nMass;$/;"	m	struct:cpPinJoint
nMass	chipmunk_structs.h	/^	cpFloat nMass;$/;"	m	struct:cpSlideJoint
next	chipmunk_structs.h	/^		cpBody *next;$/;"	m	struct:cpBody::__anon1
next	chipmunk_structs.h	/^	cpShape *next;$/;"	m	struct:cpShape
next	chipmunk_structs.h	/^	struct cpArbiter *next, *prev;$/;"	m	struct:cpArbiterThread	typeref:struct:cpArbiterThread::cpArbiter
next_a	chipmunk_structs.h	/^	cpConstraint *next_a, *next_b;$/;"	m	struct:cpConstraint
next_b	chipmunk_structs.h	/^	cpConstraint *next_a, *next_b;$/;"	m	struct:cpConstraint
normal	chipmunk.h	/^typedef void (^cpSpaceSegmentQueryBlock)(cpShape *shape, cpVect point, cpVect normal, cpFloat alpha);$/;"	v
normal	cpArbiter.h	/^	cpVect normal;$/;"	m	struct:cpContactPointSet
normal	cpShape.h	/^	cpVect normal;$/;"	m	struct:cpSegmentQueryInfo
normal_relative_velocity	chipmunk_private.h	/^normal_relative_velocity(cpBody *a, cpBody *b, cpVect r1, cpVect r2, cpVect n){$/;"	f
num	chipmunk_structs.h	/^	int num, max;$/;"	m	struct:cpArray
operator *	chipmunk.h	/^static inline cpVect operator *(const cpVect v, const cpFloat s){return cpvmult(v, s);}$/;"	f
operator +	chipmunk.h	/^static inline cpVect operator +(const cpVect v1, const cpVect v2){return cpvadd(v1, v2);}$/;"	f
operator -	chipmunk.h	/^static inline cpVect operator -(const cpVect v){return cpvneg(v);}$/;"	f
operator -	chipmunk.h	/^static inline cpVect operator -(const cpVect v1, const cpVect v2){return cpvsub(v1, v2);}$/;"	f
operator ==	chipmunk.h	/^static inline cpBool operator ==(const cpVect v1, const cpVect v2){return cpveql(v1, v2);}$/;"	f
p	chipmunk_structs.h	/^	cpVect p;$/;"	m	struct:cpBody
phase	chipmunk_structs.h	/^	cpFloat angle, phase, ratchet;$/;"	m	struct:cpRatchetJoint
phase	chipmunk_structs.h	/^	cpFloat phase, ratio;$/;"	m	struct:cpGearJoint
planes	chipmunk_structs.h	/^	struct cpSplittingPlane *planes;$/;"	m	struct:cpPolyShape	typeref:struct:cpPolyShape::cpSplittingPlane
point	chipmunk.h	/^typedef void (^cpSpacePointQueryBlock)(cpShape *shape, cpVect point, cpFloat distance, cpVect gradient);$/;"	v
point	chipmunk.h	/^typedef void (^cpSpaceSegmentQueryBlock)(cpShape *shape, cpVect point, cpVect normal, cpFloat alpha);$/;"	v
point	cpShape.h	/^	cpVect point;$/;"	m	struct:cpPointQueryInfo
point	cpShape.h	/^	cpVect point;$/;"	m	struct:cpSegmentQueryInfo
pointA	cpArbiter.h	/^		cpVect pointA, pointB;$/;"	m	struct:cpContactPointSet::__anon2
pointB	cpArbiter.h	/^		cpVect pointA, pointB;$/;"	m	struct:cpContactPointSet::__anon2
pointQuery	chipmunk_structs.h	/^	cpShapePointQueryImpl pointQuery;$/;"	m	struct:cpShapeClass
points	chipmunk.h	/^typedef void (^cpSpaceShapeQueryBlock)(cpShape *shape, cpContactPointSet *points);$/;"	v
points	cpArbiter.h	/^	} points[CP_MAX_CONTACTS_PER_ARBITER];$/;"	m	struct:cpContactPointSet	typeref:struct:cpContactPointSet::__anon2
pooledArbiters	chipmunk_structs.h	/^	cpArray *pooledArbiters;$/;"	m	struct:cpSpace
position_func	chipmunk_structs.h	/^	cpBodyPositionFunc position_func;$/;"	m	struct:cpBody
postSolve	chipmunk_structs.h	/^	cpConstraintPostSolveFunc postSolve;$/;"	m	struct:cpConstraint
postSolveFunc	cpSpace.h	/^	cpCollisionPostSolveFunc postSolveFunc;$/;"	m	struct:cpCollisionHandler
postStepCallbacks	chipmunk_structs.h	/^	cpArray *postStepCallbacks;$/;"	m	struct:cpSpace
preSolve	chipmunk_structs.h	/^	cpConstraintPreSolveFunc preSolve;$/;"	m	struct:cpConstraint
preSolveFunc	cpSpace.h	/^	cpCollisionPreSolveFunc preSolveFunc;$/;"	m	struct:cpCollisionHandler
preStep	chipmunk_structs.h	/^	cpConstraintPreStepImpl preStep;$/;"	m	struct:cpConstraintClass
prev	chipmunk_structs.h	/^	cpShape *prev;$/;"	m	struct:cpShape
prev	chipmunk_structs.h	/^	struct cpArbiter *next, *prev;$/;"	m	struct:cpArbiterThread	typeref:struct:cpArbiterThread::
query	cpSpatialIndex.h	/^	cpSpatialIndexQueryImpl query;$/;"	m	struct:cpSpatialIndexClass
r	chipmunk_structs.h	/^	cpFloat r;$/;"	m	struct:cpCircleShape
r	chipmunk_structs.h	/^	cpFloat r;$/;"	m	struct:cpPolyShape
r	chipmunk_structs.h	/^	cpFloat r;$/;"	m	struct:cpSegmentShape
r	cpBB.h	/^	cpFloat l, b, r ,t;$/;"	m	struct:cpBB
r	cpSpace.h	/^	float r, g, b, a;$/;"	m	struct:cpSpaceDebugColor
r1	chipmunk_structs.h	/^	cpVect r1, r2;$/;"	m	struct:cpContact
r1	chipmunk_structs.h	/^	cpVect r1, r2;$/;"	m	struct:cpDampedSpring
r1	chipmunk_structs.h	/^	cpVect r1, r2;$/;"	m	struct:cpGrooveJoint
r1	chipmunk_structs.h	/^	cpVect r1, r2;$/;"	m	struct:cpPinJoint
r1	chipmunk_structs.h	/^	cpVect r1, r2;$/;"	m	struct:cpPivotJoint
r1	chipmunk_structs.h	/^	cpVect r1, r2;$/;"	m	struct:cpSlideJoint
r2	chipmunk_structs.h	/^	cpVect r1, r2;$/;"	m	struct:cpContact
r2	chipmunk_structs.h	/^	cpVect r1, r2;$/;"	m	struct:cpDampedSpring
r2	chipmunk_structs.h	/^	cpVect r1, r2;$/;"	m	struct:cpGrooveJoint
r2	chipmunk_structs.h	/^	cpVect r1, r2;$/;"	m	struct:cpPinJoint
r2	chipmunk_structs.h	/^	cpVect r1, r2;$/;"	m	struct:cpPivotJoint
r2	chipmunk_structs.h	/^	cpVect r1, r2;$/;"	m	struct:cpSlideJoint
ratchet	chipmunk_structs.h	/^	cpFloat angle, phase, ratchet;$/;"	m	struct:cpRatchetJoint
rate	chipmunk_structs.h	/^	cpFloat rate;$/;"	m	struct:cpSimpleMotor
ratio	chipmunk_structs.h	/^	cpFloat phase, ratio;$/;"	m	struct:cpGearJoint
ratio_inv	chipmunk_structs.h	/^	cpFloat ratio_inv;$/;"	m	struct:cpGearJoint
reindex	cpSpatialIndex.h	/^	cpSpatialIndexReindexImpl reindex;$/;"	m	struct:cpSpatialIndexClass
reindexObject	cpSpatialIndex.h	/^	cpSpatialIndexReindexObjectImpl reindexObject;$/;"	m	struct:cpSpatialIndexClass
reindexQuery	cpSpatialIndex.h	/^	cpSpatialIndexReindexQueryImpl reindexQuery;$/;"	m	struct:cpSpatialIndexClass
relative_velocity	chipmunk_private.h	/^relative_velocity(cpBody *a, cpBody *b, cpVect r1, cpVect r2){$/;"	f
remove	cpSpatialIndex.h	/^	cpSpatialIndexRemoveImpl remove;$/;"	m	struct:cpSpatialIndexClass
restAngle	chipmunk_structs.h	/^	cpFloat restAngle;$/;"	m	struct:cpDampedRotarySpring
restLength	chipmunk_structs.h	/^	cpFloat restLength;$/;"	m	struct:cpDampedSpring
root	chipmunk_structs.h	/^		cpBody *root;$/;"	m	struct:cpBody::__anon1
rousedBodies	chipmunk_structs.h	/^	cpArray *rousedBodies;$/;"	m	struct:cpSpace
segmentQuery	chipmunk_structs.h	/^	cpShapeSegmentQueryImpl segmentQuery;$/;"	m	struct:cpShapeClass
segmentQuery	cpSpatialIndex.h	/^	cpSpatialIndexSegmentQueryImpl segmentQuery;$/;"	m	struct:cpSpatialIndexClass
sensor	chipmunk_structs.h	/^	cpBool sensor;$/;"	m	struct:cpShape
separateFunc	cpSpace.h	/^	cpCollisionSeparateFunc separateFunc;$/;"	m	struct:cpCollisionHandler
shape	chipmunk.h	/^typedef void (^cpSpaceBBQueryBlock)(cpShape *shape);$/;"	v
shape	chipmunk.h	/^typedef void (^cpSpacePointQueryBlock)(cpShape *shape, cpVect point, cpFloat distance, cpVect gradient);$/;"	v
shape	chipmunk.h	/^typedef void (^cpSpaceSegmentQueryBlock)(cpShape *shape, cpVect point, cpVect normal, cpFloat alpha);$/;"	v
shape	chipmunk.h	/^typedef void (^cpSpaceShapeQueryBlock)(cpShape *shape, cpContactPointSet *points);$/;"	v
shape	chipmunk_structs.h	/^	cpShape shape;$/;"	m	struct:cpCircleShape
shape	chipmunk_structs.h	/^	cpShape shape;$/;"	m	struct:cpPolyShape
shape	chipmunk_structs.h	/^	cpShape shape;$/;"	m	struct:cpSegmentShape
shape	cpShape.h	/^	const cpShape *shape;$/;"	m	struct:cpPointQueryInfo
shape	cpShape.h	/^	const cpShape *shape;$/;"	m	struct:cpSegmentQueryInfo
shapeIDCounter	chipmunk_structs.h	/^	cpHashValue shapeIDCounter;$/;"	m	struct:cpSpace
shapeList	chipmunk_structs.h	/^	cpShape *shapeList;$/;"	m	struct:cpBody
shapeOutlineColor	cpSpace.h	/^	cpSpaceDebugColor shapeOutlineColor;$/;"	m	struct:cpSpaceDebugDrawOptions
skipPostStep	chipmunk_structs.h	/^	cpBool skipPostStep;$/;"	m	struct:cpSpace
sleepTimeThreshold	chipmunk_structs.h	/^	cpFloat sleepTimeThreshold;$/;"	m	struct:cpSpace
sleeping	chipmunk_structs.h	/^	} sleeping;$/;"	m	struct:cpBody	typeref:struct:cpBody::__anon1
sleepingComponents	chipmunk_structs.h	/^	cpArray *sleepingComponents;$/;"	m	struct:cpSpace
space	chipmunk_structs.h	/^	cpSpace *space;$/;"	m	struct:cpBody
space	chipmunk_structs.h	/^	cpSpace *space;$/;"	m	struct:cpConstraint
space	chipmunk_structs.h	/^	cpSpace *space;$/;"	m	struct:cpShape
springForceFunc	chipmunk_structs.h	/^	cpDampedSpringForceFunc springForceFunc;$/;"	m	struct:cpDampedSpring
springTorqueFunc	chipmunk_structs.h	/^	cpDampedRotarySpringTorqueFunc springTorqueFunc;$/;"	m	struct:cpDampedRotarySpring
stamp	chipmunk_structs.h	/^	cpTimestamp stamp;$/;"	m	struct:cpArbiter
stamp	chipmunk_structs.h	/^	cpTimestamp stamp;$/;"	m	struct:cpSpace
state	chipmunk_structs.h	/^	enum cpArbiterState state;$/;"	m	struct:cpArbiter	typeref:enum:cpArbiter::cpArbiterState
staticBodies	chipmunk_structs.h	/^	cpArray *staticBodies;$/;"	m	struct:cpSpace
staticBody	chipmunk_structs.h	/^	cpBody *staticBody;$/;"	m	struct:cpSpace
staticIndex	cpSpatialIndex.h	/^	cpSpatialIndex *staticIndex, *dynamicIndex;$/;"	m	struct:cpSpatialIndex
staticShapes	chipmunk_structs.h	/^	cpSpatialIndex *staticShapes;$/;"	m	struct:cpSpace
stiffness	chipmunk_structs.h	/^	cpFloat stiffness;$/;"	m	struct:cpDampedRotarySpring
stiffness	chipmunk_structs.h	/^	cpFloat stiffness;$/;"	m	struct:cpDampedSpring
surfaceV	chipmunk_structs.h	/^	cpVect surfaceV;$/;"	m	struct:cpShape
surface_vr	chipmunk_structs.h	/^	cpVect surface_vr;$/;"	m	struct:cpArbiter
swapped	chipmunk_structs.h	/^	cpBool swapped;$/;"	m	struct:cpArbiter
t	chipmunk_structs.h	/^	cpFloat t;$/;"	m	struct:cpBody
t	cpBB.h	/^	cpFloat l, b, r ,t;$/;"	m	struct:cpBB
tMass	chipmunk_structs.h	/^	cpFloat nMass, tMass;$/;"	m	struct:cpContact
ta	chipmunk_structs.h	/^	cpVect ta, tb, tn;$/;"	m	struct:cpSegmentShape
target_vrn	chipmunk_structs.h	/^	cpFloat target_vrn;$/;"	m	struct:cpDampedSpring
target_wrn	chipmunk_structs.h	/^	cpFloat target_wrn;$/;"	m	struct:cpDampedRotarySpring
tb	chipmunk_structs.h	/^	cpVect ta, tb, tn;$/;"	m	struct:cpSegmentShape
tc	chipmunk_structs.h	/^	cpVect c, tc;$/;"	m	struct:cpCircleShape
thread_a	chipmunk_structs.h	/^	struct cpArbiterThread thread_a, thread_b;$/;"	m	struct:cpArbiter	typeref:struct:cpArbiter::cpArbiterThread
thread_b	chipmunk_structs.h	/^	struct cpArbiterThread thread_a, thread_b;$/;"	m	struct:cpArbiter	typeref:struct:cpArbiter::
tn	chipmunk_structs.h	/^	cpVect ta, tb, tn;$/;"	m	struct:cpSegmentShape
transform	chipmunk_structs.h	/^	cpTransform transform;$/;"	m	struct:cpBody
tx	chipmunk_types.h	/^		cpFloat a, b, c, d, tx, ty;$/;"	m	struct:cpTransform
ty	chipmunk_types.h	/^		cpFloat a, b, c, d, tx, ty;$/;"	m	struct:cpTransform
type	chipmunk_structs.h	/^	cpCollisionType type;$/;"	m	struct:cpShape
type	chipmunk_structs.h	/^	cpShapeType type;$/;"	m	struct:cpShapeClass
typeA	cpSpace.h	/^	const cpCollisionType typeA;$/;"	m	struct:cpCollisionHandler
typeB	cpSpace.h	/^	const cpCollisionType typeB;$/;"	m	struct:cpCollisionHandler
u	chipmunk_structs.h	/^	cpFloat u;$/;"	m	struct:cpArbiter
u	chipmunk_structs.h	/^	cpFloat u;$/;"	m	struct:cpShape
userData	chipmunk_structs.h	/^	cpDataPointer userData;$/;"	m	struct:cpBody
userData	chipmunk_structs.h	/^	cpDataPointer userData;$/;"	m	struct:cpConstraint
userData	chipmunk_structs.h	/^	cpDataPointer userData;$/;"	m	struct:cpShape
userData	chipmunk_structs.h	/^	cpDataPointer userData;$/;"	m	struct:cpSpace
userData	cpSpace.h	/^	cpDataPointer userData;$/;"	m	struct:cpCollisionHandler
usesWildcards	chipmunk_structs.h	/^	cpBool usesWildcards;$/;"	m	struct:cpSpace
v	chipmunk_structs.h	/^	cpVect v;$/;"	m	struct:cpBody
v0	chipmunk_structs.h	/^	cpVect v0, n;$/;"	m	struct:cpSplittingPlane
v_bias	chipmunk_structs.h	/^	cpVect v_bias;$/;"	m	struct:cpBody
v_coef	chipmunk_structs.h	/^	cpFloat v_coef;$/;"	m	struct:cpDampedSpring
velocity_func	chipmunk_structs.h	/^	cpBodyVelocityFunc velocity_func;$/;"	m	struct:cpBody
verts	cpPolyline.h	/^  cpVect verts[];$/;"	m	struct:cpPolyline
w	chipmunk_structs.h	/^	cpFloat w;$/;"	m	struct:cpBody
w_bias	chipmunk_structs.h	/^	cpFloat w_bias;$/;"	m	struct:cpBody
w_coef	chipmunk_structs.h	/^	cpFloat w_coef;$/;"	m	struct:cpDampedRotarySpring
x	chipmunk_types.h	/^	typedef struct cpVect{cpFloat x,y;} cpVect;$/;"	m	struct:cpVect
y	chipmunk_types.h	/^	typedef struct cpVect{cpFloat x,y;} cpVect;$/;"	m	struct:cpVect
